# Socat VPN Relay Configuration Template
# Copy this file to .env.socat and customize the values for your setup

# VPN Network Configuration
# SOCAT_VPN_IP: The IP address of your VPN client that will receive relayed connections
# This should be the static IP assigned to your VPN client (e.g., 10.8.0.100)
# Leave empty for auto-detection from TUN interface
SOCAT_VPN_IP=10.8.0.100

# Localhost Configuration
# SOCAT_LOCALHOST_IP: The IP address on localhost where your services are running
# Usually 127.0.0.1 for local services
SOCAT_LOCALHOST_IP=127.0.0.1

# Port Relay Configuration
# SOCAT_PORTS: List of ports to relay from VPN to localhost
# Format: PORT:DESCRIPTION,PORT:DESCRIPTION,...
# Examples:
# - 3000:React Development Server
# - 8080:HTTP Server
# - 5432:PostgreSQL Database
# - 6379:Redis Cache
# - 9090:Monitoring Dashboard
SOCAT_PORTS=8080:HTTP_Server,3000:Development_Server,5432:Database

# Service Management Configuration
# SOCAT_RESTART_POLICY: How systemd should handle service restarts
# Options: always, on-failure, on-abnormal, on-watchdog, never
SOCAT_RESTART_POLICY=always

# SOCAT_RESTART_DELAY: Seconds to wait before restarting failed service
SOCAT_RESTART_DELAY=10

# SOCAT_USER: User to run socat processes as (for security)
# Use 'nobody' for most cases, 'root' only if binding to privileged ports (<1024)
SOCAT_USER=nobody

# Logging Configuration
# SOCAT_LOG_LEVEL: Verbosity level for socat logging
# Options: fatal, error, warning, notice, info, debug
SOCAT_LOG_LEVEL=notice

# SOCAT_ENABLE_LOGGING: Enable detailed logging to systemd journal
# Set to true for troubleshooting, false for production
SOCAT_ENABLE_LOGGING=true

# Advanced Socat Options
# SOCAT_FORK: Allow multiple concurrent connections to the same port
# Set to true for services that need to handle multiple connections
SOCAT_FORK=true

# SOCAT_REUSEADDR: Enable SO_REUSEADDR socket option
# Helps with socket binding issues
SOCAT_REUSEADDR=true

# SOCAT_KEEPALIVE: Enable TCP keepalive for long-running connections
# Useful for database connections
SOCAT_KEEPALIVE=false

# Firewall Integration
# SOCAT_AUTO_UFW_RULES: Automatically apply UFW firewall rules
# Set to true to automatically create firewall rules for relayed ports
SOCAT_AUTO_UFW_RULES=true

# SOCAT_UFW_COMMENT_PREFIX: Prefix for UFW rule comments
# Helps identify VPN relay rules in firewall configuration
SOCAT_UFW_COMMENT_PREFIX=VPN_Relay

# =================================================================
# USAGE INSTRUCTIONS
# =================================================================
#
# 1. Copy this file to .env.socat:
#    cp .env.socat.example .env.socat
#
# 2. Edit .env.socat with your specific values:
#    nano .env.socat
#
# 3. Install the socat relay service:
#    ./manage-socat-relays.sh install
#
# 4. Start the relay services:
#    ./manage-socat-relays.sh start
#
# 5. Enable auto-start on boot:
#    ./manage-socat-relays.sh enable
#
# 6. Check service status:
#    ./manage-socat-relays.sh status
#
# 7. View service logs:
#    ./manage-socat-relays.sh logs
#
# =================================================================
# SECURITY NOTES
# =================================================================
#
# - Only relay ports that are absolutely necessary
# - Use SOCAT_USER=nobody for non-privileged ports
# - Keep SOCAT_AUTO_UFW_RULES=true for automatic firewall protection
# - Regularly audit which ports are being relayed
# - Monitor service logs for suspicious activity
#
# =================================================================
# TROUBLESHOOTING
# =================================================================
#
# If services fail to start:
# 1. Check if ports are already in use: netstat -tlnp | grep :PORT
# 2. Verify VPN client IP is correct and reachable
# 3. Check service logs: ./manage-socat-relays.sh logs
# 4. Ensure firewall rules are applied: sudo ufw status
#
# =================================================================
# EXAMPLES
# =================================================================
#
# Development Environment:
# SOCAT_PORTS=3000:React_App,8080:API_Server,5432:PostgreSQL,6379:Redis
#
# Production Database Access:
# SOCAT_PORTS=5432:PostgreSQL_Prod,3306:MySQL_Prod
#
# Monitoring Stack:
# SOCAT_PORTS=9090:Prometheus,3000:Grafana,5601:Kibana